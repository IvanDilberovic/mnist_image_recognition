{"version":3,"sources":["components/Logo/Logo.png","components/Canvas/Canvas.js","components/Logo/Logo.js","components/Table/TableComponent.js","components/Loader/Loader.js","components/ImageGallery/ImageGalleryComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","paint","Logo","react_default","a","createElement","className","tilt_default","options","max","style","height","width","paddingTop","src","logo","alt","TableComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rows","map","row","key","id","value","Component","Loader","loading","setState","ImageGalleryComponent","handleNavRight","param","e","console","log","layers","toConsumableArray","found","find","element","layer","split","index","indexOf","length","item","objectSpread","loaded","images","description","srcSet","getLayerImage","drawnImage","handleNavLeft","bind","assertThisInitialized","onClick","image","_this2","fetch","URL","method","headers","Content-Type","body","JSON","stringify","then","response","json","data","prevState","concat","name","picture","push","components_Loader_Loader","React","clickX","clickY","clickDrag","Canvas","predictions","layerImages","showResults","showTableResults","showImageResults","handleMouseDown","handleMouseMove","handleMouseUp","handleMouseLeave","handleOnSubmitImage","handleOnSubmitClear","x","y","dragging","context","refs","canvas","getContext","clearRect","strokeStyle","lineJoin","lineWidth","i","beginPath","moveTo","lineTo","closePath","stroke","forceUpdate","mouseX","pageX","offsetLeft","mouseY","pageY","offsetTop","addClick","redraw","setAttribute","backgroundColor","border","margin","marginLeft","marginRight","display","fillStyle","fillRect","canvas2","canvasNetwork","context2","globalCompositeOperation","destCanvas","destContext","image_Data","getImageData","putImageData","toDataURL","getLayerNames","small_image","Image","onload","drawImage","results","sendToNetwork","_this3","handleData","createData","_this4","img","_this5","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","type","components_Table_TableComponent","components_ImageGallery_ImageGalleryComponent","particleOptions","particles","number","density","enable","value_area","color","shape","polygon","nb_sides","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","particles_nb","remove","retina_detect","App","src_components_Logo_Logo","components_Canvas_Canvas","particles_default","params","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02b999c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.8b8a523f.png\";","import React, { Component } from \"react\";\r\nimport \"./Canvas.css\";\r\nimport \"tachyons\";\r\nimport TableComponent from \"../Table/TableComponent\";\r\nimport ImageGalleryComponent from \"../ImageGallery/ImageGalleryComponent\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\nlet clickX = [];\r\nlet clickY = [];\r\nlet clickDrag = [];\r\nlet paint;\r\nlet id = 0;\r\nlet rows = [];\r\nconst URL = \"https://image-recognition-api.herokuapp.com\";\r\n\r\nclass Canvas extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      image: \"\",\r\n      layers: [],\r\n      predictions: [],\r\n      layerImages: [],\r\n      showResults: false,\r\n      loading: false,\r\n      showTableResults: false,\r\n      showImageResults: false\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.handleOnSubmitImage = this.handleOnSubmitImage.bind(this);\r\n    this.handleOnSubmitClear = this.handleOnSubmitClear.bind(this);\r\n  }\r\n\r\n  addClick(x, y, dragging) {\r\n    clickX.push(x);\r\n    clickY.push(y);\r\n    clickDrag.push(dragging);\r\n  }\r\n\r\n  redraw() {\r\n    const canvas = this.refs.canvas;\r\n    const context = canvas.getContext(\"2d\");\r\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n    context.strokeStyle = \"black\";\r\n    context.lineJoin = \"round\";\r\n    context.lineWidth = 10;\r\n\r\n    for (var i = 0; i < clickX.length; i++) {\r\n      context.beginPath();\r\n      if (clickDrag[i] && i) {\r\n        context.moveTo(clickX[i - 1], clickY[i - 1]);\r\n      } else {\r\n        context.moveTo(clickX[i] - 1, clickY[i]);\r\n      }\r\n      context.lineTo(clickX[i], clickY[i]);\r\n      context.closePath();\r\n      context.stroke();\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  handleMouseDown(e) {\r\n    const canvas = this.refs.canvas;\r\n    let mouseX = e.pageX - canvas.offsetLeft;\r\n    let mouseY = e.pageY - canvas.offsetTop;\r\n\r\n    paint = true;\r\n\r\n    this.addClick(mouseX, mouseY);\r\n    this.redraw();\r\n  }\r\n\r\n  handleMouseMove(e) {\r\n    if (paint) {\r\n      const canvas = this.refs.canvas;\r\n      let mouseX = e.pageX - canvas.offsetLeft;\r\n      let mouseY = e.pageY - canvas.offsetTop;\r\n\r\n      this.addClick(mouseX, mouseY, true);\r\n      this.redraw();\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    paint = false;\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    paint = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.refs.canvas;\r\n    canvas.setAttribute(\"width\", 150);\r\n    canvas.setAttribute(\"height\", 150);\r\n    canvas.style.backgroundColor = \"white\"; //bio je white\r\n    canvas.style.border = \"2px solid\";\r\n    canvas.style.margin = \"10px\";\r\n    canvas.style.marginLeft = \"auto\";\r\n    canvas.style.marginRight = \"auto\";\r\n    canvas.style.display = \"block\";\r\n    const context = canvas.getContext(\"2d\");\r\n    context.fillStyle = \"white\";\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const canvas2 = this.refs.canvasNetwork;\r\n    canvas2.setAttribute(\"width\", 150);\r\n    canvas2.setAttribute(\"height\", 150);\r\n    canvas2.style.backgroundColor = \"white\"; //bio je white\r\n    canvas2.style.border = \"2px solid\";\r\n    canvas2.style.margin = \"10px\";\r\n    canvas2.style.marginLeft = \"auto\";\r\n    canvas2.style.marginRight = \"auto\";\r\n    canvas2.style.display = \"block\";\r\n    canvas2.style.display = \"none\";\r\n    const context2 = canvas2.getContext(\"2d\");\r\n    context2.fillStyle = \"white\";\r\n    context2.fillRect(0, 0, canvas2.width, canvas2.height);\r\n  }\r\n\r\n  handleOnSubmitImage() {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n\r\n    const canvas = this.refs.canvas;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    //Put white background behind the image\r\n    context.globalCompositeOperation = \"destination-over\";\r\n    context.fillStyle = \"white\";\r\n    context.fillRect(0, 0, 150, 150);\r\n\r\n    //get destination canvas\r\n    const destCanvas = this.refs.canvasNetwork;\r\n    const destContext = destCanvas.getContext(\"2d\");\r\n\r\n    let image_Data = context.getImageData(0, 0, 150, 150);\r\n    let data = image_Data.data;\r\n    //invert color of image\r\n    for (var i = 0; i < data.length; i += 4) {\r\n      // red\r\n      data[i] = 255 - data[i];\r\n      // green\r\n      data[i + 1] = 255 - data[i + 1];\r\n      // blue\r\n      data[i + 2] = 255 - data[i + 2];\r\n    }\r\n\r\n    // set original image on destination canvas and take the url from canvas\r\n    destContext.putImageData(image_Data, 0, 0);\r\n    const image = destCanvas.toDataURL(\"image/png\");\r\n\r\n    //save the drawn image in the state\r\n    this.setState({\r\n      image: image\r\n    });\r\n    //get all layer names\r\n    this.getLayerNames(image);\r\n\r\n    destContext.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n    destContext.beginPath();\r\n\r\n    //resize the image for CNN network\r\n    let small_image = new Image();\r\n    var imgWidth = 28 / 2;\r\n    var imgHeight = 28 / 2;\r\n\r\n    small_image.onload = () => {\r\n      destContext.drawImage(\r\n        small_image,\r\n        destCanvas.width / 2 - imgWidth,\r\n        destCanvas.height / 2 - imgHeight,\r\n        28,\r\n        28\r\n      );\r\n    };\r\n\r\n    small_image.src = image;\r\n  }\r\n\r\n  getLayerNames(image) {\r\n    fetch(URL + \"/api/GetLayerNames\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(\"Layers\", data.results);\r\n        this.setState({\r\n          layers: data.results\r\n        });\r\n        //send image to network for prediction\r\n        this.sendToNetwork(image);\r\n      });\r\n  }\r\n\r\n  sendToNetwork(image) {\r\n    console.log(\r\n      \"DATA SENT -> \",\r\n      JSON.stringify({\r\n        image: image\r\n      })\r\n    );\r\n    fetch(URL + \"/api/GetPrediction\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        image: image\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(\"DATA RECEIVED -> \", data);\r\n        this.handleData(data);\r\n        //Get first image from first layer after prediction\r\n        this.getLayerImage(image);\r\n        //get all layer images\r\n        //this.getAllLayerImages(image);\r\n      });\r\n  }\r\n\r\n  handleData(data) {\r\n    for (let index = 0; index < 4; index++) {\r\n      const element = data.results[index];\r\n      rows.push(this.createData(element.key, element.value));\r\n    }\r\n\r\n    this.setState({\r\n      predictions: rows\r\n    });\r\n  }\r\n\r\n  createData(key, value) {\r\n    id += 1;\r\n    return {\r\n      id,\r\n      key,\r\n      value\r\n    };\r\n  }\r\n\r\n  getLayerImage(image) {\r\n    fetch(URL + \"/api/GetLayerImage\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        layer: [\r\n          {\r\n            layer: this.state.layers[0]\r\n          }\r\n          /*{ layer: this.state.layers[1] }*/\r\n        ],\r\n        image: image\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        //Prepare image array\r\n        let img = [];\r\n        for (let index = 0; index < data.images.length; index++) {\r\n          const element = data.images[index];\r\n          img.push({\r\n            description: element.name,\r\n            srcSet: \"data:image/png;base64,\" + element.picture\r\n          });\r\n        }\r\n\r\n        this.setState(\r\n          {\r\n            layerImages: img\r\n          },\r\n          () => {\r\n            console.log(\"CALLBACK\", this.state.layerImages);\r\n            this.setState({\r\n              showResults: true,\r\n              loading: false\r\n            });\r\n          }\r\n        );\r\n        //this.setState({ showResults: true, loading: false });\r\n      });\r\n  }\r\n\r\n  getAllLayerImages(image) {\r\n    fetch(URL + \"/api/GetAllLayerImages\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        image: image\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        //Prepare image array\r\n        let img = [];\r\n        for (let index = 0; index < data.images.length; index++) {\r\n          const element = data.images[index];\r\n          img.push({\r\n            description: element.name,\r\n            srcSet: \"data:image/png;base64,\" + element.picture\r\n          });\r\n        }\r\n        this.setState(\r\n          prevState => ({\r\n            layerImages: [...prevState.layerImages, img]\r\n          }),\r\n          () => console.log(this.state.layerImages)\r\n        );\r\n        this.setState({\r\n          showResults: true,\r\n          showImageResults: true\r\n        });\r\n      });\r\n  }\r\n\r\n  getWeightImage() {\r\n    fetch(URL + \"/api/GetWeightImage\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data.images);\r\n      });\r\n  }\r\n\r\n  handleOnSubmitClear() {\r\n    const canvas = this.refs.canvas;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    const destCanvas = this.refs.canvasNetwork;\r\n    const destContext = destCanvas.getContext(\"2d\");\r\n\r\n    context.clearRect(0, 0, context.canvas.width, context.canvas.height);\r\n    context.beginPath();\r\n\r\n    destContext.clearRect(\r\n      0,\r\n      0,\r\n      destContext.canvas.width,\r\n      destContext.canvas.height\r\n    );\r\n    destContext.beginPath();\r\n\r\n    clickX = [];\r\n    clickY = [];\r\n    clickDrag = [];\r\n    rows = [];\r\n\r\n    this.setState({\r\n      image: \"\",\r\n      layers: [],\r\n      predictions: [],\r\n      layerImages: [],\r\n      showResults: false,\r\n      loading: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <canvas\r\n          ref=\"canvas\"\r\n          onMouseDown={this.handleMouseDown}\r\n          onMouseMove={this.handleMouseMove}\r\n          onMouseUp={this.handleMouseUp}\r\n          onMouseLeave={this.handleMouseLeave}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"SUBMIT\"\r\n          onClick={this.handleOnSubmitImage}\r\n        />\r\n        <input type=\"submit\" value=\"CLEAR\" onClick={this.handleOnSubmitClear} />{\" \"}\r\n        <canvas ref=\"canvasNetwork\" />\r\n        <hr />\r\n        {this.state.showResults ? (\r\n          <div>\r\n            <TableComponent rows={this.state.predictions} /> <hr />\r\n            <ImageGalleryComponent\r\n              images={this.state.layerImages}\r\n              layers={this.state.layers}\r\n              drawnImage={this.state.image}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <Loader loading={this.state.loading} />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\nimport \"./Logo.css\";\r\nimport logo from \"./Logo.png\";\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"divLogo ma4 mt0 w5\">\r\n      <Tilt\r\n        className=\"Tilt br2 shadow-2\"\r\n        options={{ max: 60 }}\r\n        style={{ height: 150, width: 150 }}\r\n      >\r\n        <div className=\"Tilt-inner pa3\">\r\n          <img style={{ paddingTop: \"5px\" }} src={logo} alt=\"logo\" />\r\n        </div>\r\n      </Tilt>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","import React, { Component } from \"react\";\r\nimport \"./TableComponent.css\";\r\n\r\nclass TableComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <table className=\"table-fill\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\">Number</th>\r\n              <th className=\"text-center\">Probability %</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className=\"table-hover\">\r\n            {this.props.rows.map(row => {\r\n              return (\r\n                <tr key={row.id}>\r\n                  <td className=\"text-center\">{row.key}</td>\r\n                  <td className=\"text-center\">{row.value}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableComponent;\r\n","import React, { Component } from \"react\";\r\nimport \"./Loader.css\";\r\n\r\nclass Loader extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: this.props.loading\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return this.props.loading ? (\r\n      <div>\r\n        <div className=\"loader\">\r\n          <div className=\"inner one\" />\r\n          <div className=\"inner two\" />\r\n          <div className=\"inner three\" />\r\n          <h4> Loading.... </h4>\r\n        </div>\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n//import ImageGallery from \"react-image-gallery\";\r\nimport \"./ImageGalleryComponent.css\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport \"react-image-gallery/styles/css/image-gallery.css\";\r\n\r\nconst URL = \"https://image-recognition-api.herokuapp.com\";\r\n\r\nclass ImageGalleryComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      layers: [],\r\n      images: [],\r\n      drawnImage: \"\",\r\n      srcSet: \"\",\r\n      description: \"\",\r\n      loading: false\r\n    };\r\n    this.handleNavLeft = this.handleNavLeft.bind(this);\r\n    this.handleNavRight = this.handleNavRight.bind(this);\r\n  }\r\n\r\n  handleCustomRightNavClick(onClick) {\r\n    //let idx = this._imageGallery.getCurrentIndex();\r\n    this.setState({ loading: true });\r\n    const found = this.state.layers.find(element => {\r\n      return element.loaded === false;\r\n    });\r\n\r\n    if (typeof found !== \"undefined\") {\r\n      this.getLayerImage(this.state.drawnImage, found, onClick);\r\n    }\r\n  }\r\n\r\n  getLayerImage(image, layer) {\r\n    this.setState({ loading: true });\r\n    fetch(URL + \"/api/GetLayerImage\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        layer: [{ layer: layer }],\r\n        image: image\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState(prevState => ({\r\n          images: [\r\n            ...prevState.images,\r\n            {\r\n              description: data.images[0].name,\r\n              srcSet: \"data:image/png;base64,\" + data.images[0].picture\r\n            }\r\n          ]\r\n        }));\r\n        //Update the loaded layer image property\r\n        const found = this.state.layers.find(element => {\r\n          return element.layer === layer;\r\n        });\r\n\r\n        let layers = [...this.state.layers];\r\n        let index = layers.indexOf(found);\r\n        let item = { ...layers[index] };\r\n        item.loaded = true;\r\n        layers[index] = item;\r\n\r\n        //set the state to our new copy\r\n        this.setState({\r\n          layers: layers,\r\n          srcSet: \"data:image/png;base64,\" + data.images[0].picture,\r\n          description: data.images[0].name,\r\n          loading: false\r\n        });\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Handle layer names\r\n    let layers = [];\r\n    for (let index = 0; index < this.props.layers.length; index++) {\r\n      const element = this.props.layers[index];\r\n      //First layer image is already loaded so everything else is put to false except the first image\r\n      if (index !== 0) {\r\n        layers.push({ loaded: false, layer: element });\r\n      } else {\r\n        layers.push({ loaded: true, layer: element });\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      layers: layers,\r\n      images: this.props.images,\r\n      drawnImage: this.props.drawnImage,\r\n      srcSet: this.props.images[0].srcSet,\r\n      description: this.props.images[0].description\r\n    });\r\n  }\r\n\r\n  handleNavRight = param => e => {\r\n    console.log(\"RIGHT\", param);\r\n    let layers = [...this.state.layers];\r\n    const found = layers.find(element => {\r\n      return element.layer === param.split(\".\")[0];\r\n    });\r\n    let index = layers.indexOf(found);\r\n    index++;\r\n    if (index >= layers.length) {\r\n      console.log(\"Index is grater or equal then the length of array.\");\r\n      return;\r\n    }\r\n\r\n    let item = { ...layers[index] };\r\n\r\n    if (item.loaded) {\r\n      let images = [...this.state.images];\r\n\r\n      const found = images.find(element => {\r\n        return element.description.split(\".\")[0] === item.layer;\r\n      });\r\n\r\n      this.setState({ srcSet: found.srcSet, description: found.description });\r\n    } else {\r\n      this.getLayerImage(this.state.drawnImage, item.layer);\r\n    }\r\n  };\r\n\r\n  handleNavLeft = param => e => {\r\n    console.log(\"LEFT\", param);\r\n    let layers = [...this.state.layers];\r\n    const found = layers.find(element => {\r\n      return element.layer === param.split(\".\")[0];\r\n    });\r\n    let index = layers.indexOf(found);\r\n    index--;\r\n    if (index < 0) {\r\n      console.log(\"Index is lower then zero\");\r\n      return;\r\n    }\r\n    let item = { ...layers[index] };\r\n\r\n    if (item.loaded) {\r\n      let images = [...this.state.images];\r\n\r\n      const found = images.find(element => {\r\n        return element.description.split(\".\")[0] === item.layer;\r\n      });\r\n\r\n      this.setState({ srcSet: found.srcSet, description: found.description });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"slideshow-container\">\r\n        <div>\r\n          <div className=\"mySlides fade\">\r\n            <div className=\"text\">{this.state.description}</div>\r\n            <img src={this.state.srcSet} style={{ width: \"100%\" }} alt=\"\" />\r\n          </div>\r\n          <button\r\n            className=\"prev\"\r\n            onClick={this.handleNavLeft(this.state.description)}\r\n          >\r\n            &#10094;\r\n          </button>\r\n          <button\r\n            className=\"next\"\r\n            onClick={this.handleNavRight(this.state.description)}\r\n          >\r\n            &#10095;\r\n          </button>\r\n        </div>\r\n        <Loader loading={this.state.loading} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageGalleryComponent;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Particles from \"react-particles-js\";\n\nimport Logo from \"./components/Logo/Logo\";\nimport Canvas from \"./components/Canvas/Canvas\";\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 150,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    },\n    color: {\n      value: \"#000000\"\n    },\n    shape: {\n      type: \"circle\",\n      stroke: {\n        width: 0.5,\n        color: \"#ffffff\"\n      },\n      polygon: {\n        nb_sides: 5\n      }\n    },\n    opacity: {\n      value: 0.20518162519630342,\n      random: false,\n      anim: {\n        enable: false,\n        speed: 1,\n        opacity_min: 0.1,\n        sync: false\n      }\n    },\n    size: {\n      value: 3,\n      random: true,\n      anim: {\n        enable: false,\n        speed: 40,\n        size_min: 0.1,\n        sync: false\n      }\n    },\n    line_linked: {\n      enable: true,\n      distance: 150,\n      color: \"#ffffff\",\n      opacity: 0.4,\n      width: 1\n    },\n    move: {\n      enable: true,\n      speed: 6,\n      direction: \"none\",\n      random: false,\n      straight: false,\n      out_mode: \"out\",\n      bounce: false,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 1200\n      }\n    }\n  },\n  interactivity: {\n    detect_on: \"canvas\",\n    events: {\n      onhover: {\n        enable: false,\n        mode: \"repulse\"\n      },\n      onclick: {\n        enable: true,\n        mode: \"push\"\n      },\n      resize: true\n    },\n    modes: {\n      grab: {\n        distance: 400,\n        line_linked: {\n          opacity: 1\n        }\n      },\n      bubble: {\n        distance: 400,\n        size: 40,\n        duration: 2,\n        opacity: 8,\n        speed: 3\n      },\n      repulse: {\n        distance: 200,\n        duration: 0.4\n      },\n      push: {\n        particles_nb: 4\n      },\n      remove: {\n        particles_nb: 2\n      }\n    }\n  },\n  retina_detect: true\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Logo />\n        <h2>MNIST image recognition</h2>\n        <Canvas />\n        <Particles className=\"particles\" params={particleOptions} />{\" \"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}